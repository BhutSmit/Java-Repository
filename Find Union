class solution {

  public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m)
    {
        
        int i = 0;
        int j = 0;
        
        ArrayList<Integer> Union = new ArrayList<>();
        
         while(i < n && j < m){
             
            // If both elements are the same, add it once and move both pointers
            if(arr1[i] == arr2[j]){
                
                if (Union.size() == 0 || Union.get(Union.size() - 1) != arr1[i]) {
                    
                    Union.add(arr1[i]);
                    
                }
                
                i++;
                j++;
            }
            // If arr1 element is smaller, add it and move arr1 pointer
            else if(arr1[i] < arr2[j]){
                
                if (Union.size() == 0 || Union.get(Union.size() - 1) != arr1[i]) {
                    
                    Union.add(arr1[i]);
                    
                }
                
                i++;
            }
            // If arr2 element is smaller, add it and move arr2 pointer
            else {
                
                if (Union.size() == 0 || Union.get(Union.size() - 1) != arr2[j]) {
                    
                    Union.add(arr2[j]);
                    
                }
                
                j++;
            }
        }
        
        // Add remaining elements of arr1
        while(i < n){
            
            if (Union.size() == 0 || Union.get(Union.size() - 1) != arr1[i]) {
                
                Union.add(arr1[i]);
                
            }
            
            i++;
        }
        
        // Add remaining elements of arr2
        while(j < m){
            
            if (Union.size() == 0 || Union.get(Union.size() - 1) != arr2[j]) {
                
                Union.add(arr2[j]);
                
            }
            
            j++;
        }
        
        return Union;
        
    }
}
================================================================================

Given two sorted arrays of size n and m respectively, find their union. The Union of two arrays can be defined as the common and distinct elements in the two arrays. Return the elements in sorted order.

Example 1:

Input: 
n = 5, arr1[] = {1, 2, 3, 4, 5}  
m = 5, arr2 [] = {1, 2, 3, 6, 7}
Output: 
1 2 3 4 5 6 7
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5 6 7.
Example 2:

Input: 
n = 5, arr1[] = {2, 2, 3, 4, 5}  
m = 5, arr2[] = {1, 1, 2, 3, 4}
Output: 
1 2 3 4 5
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5.
Example 3:

Input:
n = 5, arr1[] = {1, 1, 1, 1, 1}
m = 5, arr2[] = {2, 2, 2, 2, 2}
Output: 
1 2
Explanation: 
Distinct elements including both the arrays are: 1 2.
Your Task: 
You do not need to read input or print anything. Complete the function findUnion() that takes two arrays arr1[], arr2[], and their size n and m as input parameters and returns a list containing the union of the two arrays.

Expected Time Complexity: O(n+m).
Expected Auxiliary Space: O(n+m).

Constraints:
1 <= n, m <= 105
-109 <= arr1[i], arr2[i] <= 109
